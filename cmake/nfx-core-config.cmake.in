#==============================================================================
# NFX-Core CMake Package Configuration
#==============================================================================

@PACKAGE_INIT@

# Version information
set(nfx-core_VERSION_MAJOR @NFX_CORE_VERSION_MAJOR@)
set(nfx-core_VERSION_MINOR @NFX_CORE_VERSION_MINOR@)
set(nfx-core_VERSION_PATCH @NFX_CORE_VERSION_PATCH@)
set(nfx-core_VERSION       @NFX_CORE_VERSION@)

# Check for required components
set(_nfx_core_supported_components
    containers
    datatypes
    json
    memory
    string
    time
)

foreach(_comp ${nfx-core_FIND_COMPONENTS})
    if(NOT _comp IN_LIST _nfx_core_supported_components)
        set(nfx-core_FOUND False)
        set(nfx-core_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
        return()
    endif()
endforeach()

# Find dependencies
include(CMakeFindDependencyMacro)

# DateTime support dependency (always required)
find_dependency(nfx-datetime 1.0.0)

# String utilities dependency (always required)
find_dependency(nfx-stringutils 1.0.0)

# String splitter dependency (always required)
find_dependency(nfx-stringsplitter 1.0.0)

# Datatypes dependency (always required)
find_dependency(nfx-datatypes 1.0.0)

# Memory dependency (always required)
find_dependency(nfx-lrucache 1.0.5)

# JSON support dependency
if("json" IN_LIST nfx-core_FIND_COMPONENTS OR NOT nfx-core_FIND_COMPONENTS)
    find_dependency(nlohmann_json @NFX_CORE_NLOHMANN_JSON_MIN_VERSION@)
endif()

# Include the exported targets
include(${CMAKE_CURRENT_LIST_DIR}/nfx-core-targets.cmake)

# Link external dependencies to nfx-core targets
# These were excluded from export to avoid transitive export issues
if(TARGET nfx-core::nfx-core)
    if(TARGET nfx-datetime::static)
        target_link_libraries(nfx-core::nfx-core INTERFACE nfx-datetime::static)
    elseif(TARGET nfx-datetime::nfx-datetime)
        target_link_libraries(nfx-core::nfx-core INTERFACE nfx-datetime::nfx-datetime)
    endif()
    
    if(TARGET nfx-stringutils::nfx-stringutils)
        target_link_libraries(nfx-core::nfx-core INTERFACE nfx-stringutils::nfx-stringutils)
    endif()
    
    if(TARGET nfx-stringsplitter::nfx-stringsplitter)
        target_link_libraries(nfx-core::nfx-core INTERFACE nfx-stringsplitter::nfx-stringsplitter)
    endif()
    
    if(TARGET nfx-datatypes::static)
        target_link_libraries(nfx-core::nfx-core INTERFACE nfx-datatypes::static)
    elseif(TARGET nfx-datatypes::nfx-datatypes)
        target_link_libraries(nfx-core::nfx-core INTERFACE nfx-datatypes::nfx-datatypes)
    endif()
    
    if(TARGET nfx-lrucache::nfx-lrucache)
        target_link_libraries(nfx-core::nfx-core INTERFACE nfx-lrucache::nfx-lrucache)
    endif()
endif()

if(TARGET nfx-core::static)
    if(TARGET nfx-datetime::static)
        target_link_libraries(nfx-core::static INTERFACE nfx-datetime::static)
    elseif(TARGET nfx-datetime::nfx-datetime)
        target_link_libraries(nfx-core::static INTERFACE nfx-datetime::nfx-datetime)
    endif()
    
    if(TARGET nfx-stringutils::nfx-stringutils)
        target_link_libraries(nfx-core::static INTERFACE nfx-stringutils::nfx-stringutils)
    endif()
    
    if(TARGET nfx-stringsplitter::nfx-stringsplitter)
        target_link_libraries(nfx-core::static INTERFACE nfx-stringsplitter::nfx-stringsplitter)
    endif()
    
    if(TARGET nfx-datatypes::static)
        target_link_libraries(nfx-core::static INTERFACE nfx-datatypes::static)
    elseif(TARGET nfx-datatypes::nfx-datatypes)
        target_link_libraries(nfx-core::static INTERFACE nfx-datatypes::nfx-datatypes)
    endif()
    
    if(TARGET nfx-lrucache::nfx-lrucache)
        target_link_libraries(nfx-core::static INTERFACE nfx-lrucache::nfx-lrucache)
    endif()
endif()

# Set component-found variables
foreach(_comp ${_nfx_core_supported_components})
    set(nfx-core_${_comp}_FOUND TRUE)
endforeach()

# Verify targets exist
set(_nfx_core_targets_available)

if(TARGET nfx-core::nfx-core)
    list(APPEND _nfx_core_targets_available "nfx-core::nfx-core")
endif()

if(TARGET nfx-core::static)  
    list(APPEND _nfx_core_targets_available "nfx-core::static")
endif()

if(NOT _nfx_core_targets_available)
    set(nfx-core_FOUND False)
    set(nfx-core_NOT_FOUND_MESSAGE "No nfx-core targets found")
    return()
endif()

# Success message
if(NOT nfx-core_FIND_QUIETLY)
    message(STATUS "Found nfx-core ${nfx-core_VERSION}")
    message(STATUS "Available targets: ${_nfx_core_targets_available}")
endif()

check_required_components(nfx-core)
