#==============================================================================
# NFX_CORE - Benchmark suite CMake configuration
#==============================================================================

#----------------------------------------------
# Benchmark condition check
#----------------------------------------------

if(NOT NFX_CORE_BUILD_BENCHMARKS)
	message(STATUS "Benchmarks disabled, skipping...")
	return()
endif()

#----------------------------------------------
# Benchmarks source files
#----------------------------------------------

set(BENCHMARK_SOURCES)

if(NFX_CORE_WITH_CONTAINERS)
	list(APPEND BENCHMARK_SOURCES
		containers/BM_ChdHashMap.cpp
		containers/BM_HashMap.cpp
		containers/BM_StringMap.cpp
		containers/BM_StringSet.cpp
	)
endif()

# Core hashing benchmarks (always included if any component is enabled)
if(NFX_CORE_WITH_CONTAINERS OR NFX_CORE_WITH_STRING OR NFX_CORE_WITH_DATATYPES)
	list(APPEND BENCHMARK_SOURCES
		core/BM_Hashing.cpp
	)
endif()

if(NFX_CORE_WITH_STRING)
	list(APPEND BENCHMARK_SOURCES
		string/BM_StringBuilderPool.cpp
	)
endif()

#----------------------------------------------
# Configure benchmark executables
#----------------------------------------------

foreach(benchmark_source ${BENCHMARK_SOURCES})
	get_filename_component(benchmark_target_name ${benchmark_source} NAME_WE)

	if(NOT TARGET ${benchmark_target_name})
		add_executable(${benchmark_target_name} ${benchmark_source})

		#----------------------------------------------
		# Target-specific compiler optimisation
		#----------------------------------------------

		target_compile_options(${benchmark_target_name} PRIVATE

			#-----------------------------
			# MSVC
			#-----------------------------

			# --- Settings ---
			$<$<CXX_COMPILER_ID:MSVC>:/std:c++20>                              # C++20 standard
			$<$<CXX_COMPILER_ID:MSVC>:/utf-8>                                  # UTF-8 encoding
			$<$<CXX_COMPILER_ID:MSVC>:/MP>                                     # Multi-processor compilation
			$<$<CXX_COMPILER_ID:MSVC>:/W4>                                     # High warning level
			$<$<CXX_COMPILER_ID:MSVC>:/Wall>                                   # All warnings
			$<$<CXX_COMPILER_ID:MSVC>:/WX->                                    # Warnings not as errors
			$<$<CXX_COMPILER_ID:MSVC>:/permissive->                            # Strict conformance mode
			$<$<CXX_COMPILER_ID:MSVC>:/fp:fast>                                # Fast floating point
			$<$<CXX_COMPILER_ID:MSVC>:/Zc:__cplusplus>                         # __cplusplus macro
			$<$<CXX_COMPILER_ID:MSVC>:/Zc:inline>                              # Remove unreferenced COMDAT
			$<$<CXX_COMPILER_ID:MSVC>:/Zc:preprocessor>                        # Conforming preprocessor
			$<$<CXX_COMPILER_ID:MSVC>:/external:anglebrackets>                 # Treat angle bracket includes as external
			$<$<CXX_COMPILER_ID:MSVC>:/external:W0>                            # No warnings for external headers
			
			# --- CPU Architecture Support ---
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<BOOL:${NFX_CORE_ENABLE_AVX2}>>:/arch:AVX2>        # AVX2 if supported
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<NOT:$<BOOL:${NFX_CORE_ENABLE_AVX2}>>>:/arch:SSE2> # SSE2 fallback

			# --- Optimization ---
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/O2>            # Maximum speed optimization
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/Oi>            # Enable intrinsic functions
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/Ot>            # Favor fast code over small code
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/Gy>            # Function-Level Linking
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/Qpar>          # Auto-parallelization
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/DNDEBUG>       # Disable debug assertions
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/GS->           # Disable buffer security checks
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/Gw>            # Optimize global data
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/fp:except->    # Disable floating point exceptions

			# --- Warning suppressions ---
			$<$<CXX_COMPILER_ID:MSVC>:/wd4266>                                 # no override available for virtual member function from base 'type'; function is hidden
			$<$<CXX_COMPILER_ID:MSVC>:/wd4514>                                 # unreferenced inline function has been removed
			$<$<CXX_COMPILER_ID:MSVC>:/wd4625>                                 # copy constructor was implicitly defined as deleted
			$<$<CXX_COMPILER_ID:MSVC>:/wd4626>                                 # assignment operator was implicitly defined as deleted
			$<$<CXX_COMPILER_ID:MSVC>:/wd4710>                                 # function not inlined
			$<$<CXX_COMPILER_ID:MSVC>:/wd4711>                                 # function selected for inline expansion
			$<$<CXX_COMPILER_ID:MSVC>:/wd4820>                                 # padding
			$<$<CXX_COMPILER_ID:MSVC>:/wd4866>                                 # compiler may not enforce left-to-right evaluation order for call to operator_name
			$<$<CXX_COMPILER_ID:MSVC>:/wd4868>                                 # compiler may not enforce left-to-right evaluation order in braced initializer list
			$<$<CXX_COMPILER_ID:MSVC>:/wd5026>                                 # move constructor was implicitly defined as deleted
			$<$<CXX_COMPILER_ID:MSVC>:/wd5027>                                 # move assignment operator was implicitly defined as deleted
			$<$<CXX_COMPILER_ID:MSVC>:/wd5045>                                 # Qspectre

			#-----------------------------
			# GCC/Clang
			#-----------------------------

			# --- Common settings ---
			$<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>:-std=c++20>   # C++20 standard
			$<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>:-Wall>        # All warnings
			$<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>:-Wextra>      # Extra warnings
			$<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>:-msse4.2>     # SSE4.2 support (includes CRC32)
			$<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>:-mavx>        # AVX support
			
			# --- Conditional advanced instruction sets ---
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<BOOL:${NFX_CORE_ENABLE_AVX2}>>:-mavx2>  # AVX2 if supported
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<BOOL:${NFX_CORE_ENABLE_AVX2}>>:-mfma>   # FMA if AVX2 supported

			# --- Clang-specific settings ---
			$<$<CXX_COMPILER_ID:Clang>:-mcrc32>                                   # Explicit CRC32 support for Clang

			# --- Optimization ---
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Release>>:-O3>            # Maximum optimization
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Release>>:-march=native>  # Use all available CPU features
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Release>>:-mtune=native>  # Tune for current CPU
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Release>>:-ffast-math>    # Fast math operations
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Release>>:-funroll-loops> # Unroll loops
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Release>>:-DNDEBUG>       # Disable assertions

			# --- Debug ---
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Debug>>:-O0>              # No optimization
			$<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<CONFIG:Debug>>:-g>               # Debug information

			# --- Common warning suppressions ---
			$<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>:-std=c++20>

			# --- Clang-specific warning suppressions ---
			$<$<CXX_COMPILER_ID:Clang>:-Wno-deprecated-declarations>              # Suppress POSIX deprecation warnings
			$<$<CXX_COMPILER_ID:Clang>:-Wno-pre-c++17-compat>                     # Disable pre-C++17 warnings
			$<$<CXX_COMPILER_ID:Clang>:-Wno-c++98-compat>                         # Disable C++98 compatibility warnings
			$<$<CXX_COMPILER_ID:Clang>:-Wno-c++98-compat-pedantic>                # Suppress C++98 pedantic compatibility warnings
			$<$<CXX_COMPILER_ID:Clang>:-Wno-global-constructors>                  # Suppress global constructors warning
			$<$<CXX_COMPILER_ID:Clang>:-Wno-covered-switch-default>               # Allow default in fully covered switch
			$<$<CXX_COMPILER_ID:Clang>:-Wno-switch-default>                       # Allow switches without default when all enum values are covered
			$<$<CXX_COMPILER_ID:Clang>:-Wno-deprecated-declarations>              # Suppress POSIX deprecation warnings
		)

		#----------------------------------------------
		# Target-specific linker settings
		#----------------------------------------------

		target_link_options(${benchmark_target_name} PRIVATE

			#-----------------------------
			# MSVC
			#-----------------------------

			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/OPT:REF>          # Remove unreferenced functions
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/OPT:ICF>          # Identical COMDAT folding
			$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/INCREMENTAL:NO>   # Disable incremental linking
		)

		#----------------------------------------------
		# Target linking
		#----------------------------------------------

		if(NFX_CORE_BUILD_STATIC)
			target_link_libraries(${benchmark_target_name} PRIVATE
				nfx-core::static
				nfx-datetime::static
				benchmark::benchmark
			)
		else()
			target_link_libraries(${benchmark_target_name} PRIVATE
				nfx-core::nfx-core
				nfx-datetime::nfx-datetime
				benchmark::benchmark
			)
		endif()

		#----------------------------------------------
		# Include directories
		#----------------------------------------------

		target_include_directories(${benchmark_target_name} PRIVATE
			${NFX_CORE_INCLUDE_DIR}
			${NFX_CORE_SOURCE_DIR}
		)

		#----------------------------------------------
		# Properties
		#----------------------------------------------

		set_target_properties(${benchmark_target_name} PROPERTIES
			CXX_STANDARD 20
			CXX_STANDARD_REQUIRED ON
			CXX_EXTENSIONS OFF
			POSITION_INDEPENDENT_CODE ON
			DEBUG_POSTFIX "-d"
			RUNTIME_OUTPUT_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/benchmarks"
			RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/benchmarks"
			RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/benchmarks"
		)

	endif()
endforeach()

#----------------------------------------------
# Windows: Copy DLL if building shared libs
#----------------------------------------------

if(WIN32 AND NFX_CORE_BUILD_SHARED)
	add_custom_target(copy_nfx_core_dll_to_benchmarks
		COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/benchmarks"
		COMMAND ${CMAKE_COMMAND} -E copy_if_different
			$<TARGET_FILE:nfx-core>
			"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/benchmarks/"
		COMMENT "Copying nfx-core DLL to benchmarks directory"
		DEPENDS nfx-core
	)
	
	foreach(benchmark_source ${BENCHMARK_SOURCES})
		get_filename_component(benchmark_target_name ${benchmark_source} NAME_WE)
		if(TARGET ${benchmark_target_name})
			add_dependencies(${benchmark_target_name} copy_nfx_core_dll_to_benchmarks)
		endif()
	endforeach()
endif()
